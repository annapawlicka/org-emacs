* Helpers

  There are a number of helper functions that we'll need through the
  rest of this. We'll just define them up here.

** load-if-exists

   This is just a nice function to load a file if it exists, but just
   print a message rather than an error if it doesn't. This is handy
   for things like loading specific local config that you don't want
   to go into github or be shared such as erc nicks, passwords, blog
   rolls, etc.

   #+BEGIN_SRC emacs-lisp
     (defun load-if-exists (file)
       (if (file-exists-p file)
           (progn
             (load file)
             (message (format "Loading file: %s" file)))
         (message (format "No %s file. So not loading one." file))))
   #+END_SRC

* Globals

** Update PATH

   #+BEGIN_SRC emacs-lisp
   (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
   (setq exec-path (append exec-path '("/usr/local/bin")))
   #+END_SRC
** Company mode

   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook 'global-company-mode)
   #+END_SRC

** Hippie Expand

   HippieExpand looks at the word before point and tries to expand it
   in various ways including expanding from a fixed list, expanding
   from matching text found in a buffer or expanding in ways defind by
   your own functions.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-RET") 'hippie-expand)
   #+END_SRC

** diminish

   Stops minor modes from making a mess of the modeline.

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'diminish)
   #+END_SRC

** Tabs

   Let's not used tabs for identation.

   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC

** uniquify

   When several buffers visit identically-named files, Emacs must give
   the buffers distinct names. There are several different styles for
   constructing such names. Post-forward puts the dricetory names in
   forward order after the file name.

   #+BEGIN_SRC emacs-lisp
     (require 'uniquify)
     (setq uniquify-buffer-name-style 'post-forward)
   #+END_SRC

** Multiple Cursors

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'multiple-cursors)
     (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
     (global-set-key (kbd "C->") 'mc/mark-next-like-this)
     (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
     (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
   #+END_SRC

** Discover

   Allows to discover more of Emacs using context menus.

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'discover)
     (global-discover-mode 1)
   #+END_SRC

** Disable beep

   Disable the beep sound when trying to move the cursor beyond the
   beginning or end of a document.

    #+BEGIN_SRC emacs-lisp
      (defun my-bell-function ()
        (unless (memq this-command
          '(isearch-abort abort-recursive-edit exit-minibuffer
                keyboard-quit mwheel-scroll down up next-line previous-line
                backward-char forward-char))
              (ding)))
       (setq ring-bell-function 'my-bell-function)
    #+END_SRC

** Better moving between windows

   Rebind the default C-x o to M-o as it's such a common binding to
   use.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-o") 'other-window)
   #+END_SRC
** Save Emacs sessions

   #+BEGIN_SRC emacs-lisp
     (desktop-save-mode 1)
   #+END_SRC
** Pivotal hook

   #+BEGIN_SRC emacs-lisp
    (defun git-commit-template ()
      (let ((branch (magit-get-current-branch)))
        (when (setq pivotal-id (cadr (s-match "\\([0-9]+\\)-" branch)))
          (newline 2)
          (insert (format "Story: https://www.pivotaltracker.com/story/show/%s"
                          pivotal-id))
          (goto-char (point-min))
          (insert (format "[#%s] " pivotal-id)))))
    (add-hook 'git-commit-mode-hook #'git-commit-template)
  #+END_SRC
** Save Cider history

   #+BEGIN_SRC emacs-lisp
   (setq cider-repl-history-file "~/.emacs.d/cache/cider-history")
   #+END_SRC
** Remove cider banner
   #+BEGIN_SRC emacs-lisp
   (setq cider-repl-display-help-banner nil)
   #+END_SRC
** Auto-save in the visited file
   #+BEGIN_SRC emacs-lisp
   (setq auto-save-visited-file-name t)
   #+END_SRC

** Delete trailing whitespace

   #+BEGIN_SRC emacs-lisp
   (add-hook 'before-save-hook
             (lambda nil
              (delete-trailing-whitespace)))
   #+END_SRC

** Mouse mode in iTerm 2
    #+BEGIN_SRC emacs-lisp
   (unless window-system
     (require 'mouse)
     (xterm-mouse-mode t)
     (global-set-key [mouse-4] '(lambda ()
                                (interactive)
                                (scroll-down 1)))
     (global-set-key [mouse-5] '(lambda ()
                                (interactive)
                                (scroll-up 1)))
     (defun track-mouse (e))
     (setq mouse-sel-mode t))
    #+END_SRC

** Pragma block

    #+BEGIN_SRC emacs-lisp
     (defun insert-pragma-block ()
       (interactive)
       (insert ";;-------------------------------------------------------------------------------
     ;; ## Pragma-block-name"))

     (global-set-key (kbd "<f5> p") 'insert-pragma-block)
    #+END_SRC

* non-elpa

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path (concat user-emacs-directory "non-elpa/"))
   #+END_SRC

* OSX Specific Setup

** # is broken on UK Macs

   On UK keyboards shift-3 is bound to £. This is a real pain. The #
   character is usually bound to M-3. This also causes problems,
   especially with things like window-number modes. We have a hacked
   window-number mode below that maps window 3 to s-3, which solves
   that problem. The # problem is solved with this bit of code below.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-3") '(lambda () (interactive) (insert "#")))
   #+END_SRC

   We also need to deal with £ being a UTF-8 character so we don't get
   annoying Â characters before non-ascii characters.

   #+BEGIN_SRC emacs-lisp
     (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
   #+END_SRC

** window-number-super mode

   On a mac we have M-3 mapped to be the

   #+BEGIN_SRC emacs-lisp
     (require 'window-number-super)
     (window-number-mode 1) ;; for the window numbers
     (window-number-super-mode 1) ;; for the super key binding
   #+END_SRC

** $PATH is broken

   If you don't run emacs in a terminal on Mac OS X then it can be
   really awkward to get the stuff you want in your path. This is the
   best way I've found so far to sort this out and get things like
   ~/bin and /usr/loca/bin in a $PATH that emacs can access. I quite
   like running emacs from outside the terminal.

   Thanks to the lovely and helpful [[https://twitter.com/_tobrien][Tom O'Brien]] I've got a better way
   of doing this and now my emacs environment will be in sync with my
   shell. You can out more at the github page for
   [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]].

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'exec-path-from-shell)
     (when (memq window-system '(mac ns))
       (exec-path-from-shell-initialize))
   #+END_SRC

* Pretty Emacs is pretty
** color themes

*** custom-theme-directory

    Themes seem to be quite picky about where they live. They require
    custom-theme-directory to be set. By default this is the same as
    user-emacs-directory, which is usually ~/.emacs.d. I'd like to
    keep them separate if possible. I learned this one by reading
    some of [[https://github.com/sw1nn/dotfiles][Neale Swinnerton's dotfiles]].

    #+BEGIN_SRC emacs-lisp
      (setq custom-theme-directory (concat user-emacs-directory "themes"))
    #+END_SRC

*** grandshell

    I've been finding lots of interesting things from [[https://twitter.com/steckerhalter][steckerhalter]]
    and this [[https://github.com/steckerhalter/grandshell-theme][grandshell]] theme looks pretty good. I'm going to try it
    for a while.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'grandshell-theme)
    #+END_SRC

** fonts

   Ah, the joys of playing with different monospaced fonts on
   emacs. Menlo seems to be the one I'm happiest with on my MBA.

   #+BEGIN_SRC emacs-lisp
     (when (memq window-system '(mac ns))
       (set-default-font "-apple-Menlo-medium-normal-normal-*-12-*-*-*-m-0-iso10646-1"))
   #+END_SRC

** bars, menus and numbers

   I like no scroll bars, no toolbars and line and column numbers in
   the mode-line. I like having the menus, unless I"m in a terminal as
   I sometimes discover keybindings or functions I wasn't aware of
   before.

   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
     (line-number-mode 1)
     (column-number-mode 1)
   #+END_SRC

** Startup Screen

   I'd also like to ski the startup screen and go straight to
   the *scratch* buffer.

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
   #+END_SRC

** alpha alpha alpha

   I don't use this all the time, but sometimes, when I'm hacking
   only on my diddy 13" laptop I like to have a window tailing a file
   in the background while I'm writing something in the
   foreground. This let's us toggle transparency. Who wouldn't like
   that? I'm pretty sure I got this from [[https://twitter.com/IORayne][Anthony Grimes]].

   #+BEGIN_SRC emacs-lisp
     (defun toggle-transparency ()
       (interactive)
       (let ((param (cadr (frame-parameter nil 'alpha))))
         (if (and param (/= param 100))
             (set-frame-parameter nil 'alpha '(100 100))
           (set-frame-parameter nil 'alpha '(85 50)))))
     (global-set-key (kbd "C-c t") 'toggle-transparency)
   #+END_SRC

* directories, navigation, searching, movement
** dired

   dired can do lots of things. I'm pretty basic in my use. I do like
   to have the file listings use human friendly numbers though.

   #+BEGIN_SRC emacs-lisp
     (setq dired-listing-switches "-alh")
   #+END_SRC

** helm-mode

   helm-mode is the succesor to anything.el. I don't really have my
   head around it all yet, but I'm already pretty impressed with it so
   I'll include it here and add more to it as I understand what is
   going on.

   My helm-mode guru is [[http://twitter.com/krisajenkins][Kris Jenkins]].

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'helm)
     (global-set-key (kbd "C-x C-f") 'helm-find-files)
     (global-set-key (kbd "M-x")     'helm-M-x)
     (helm-mode 1)
   #+END_SRC

   We can diminish how much room helm-mode takes up on the command
   line.

   #+BEGIN_SRC emacs-lisp
     (diminish 'helm-mode)
   #+END_SRC

** git

*** magit

    magit is a *fantastic* mode for dealing with git.

    #+BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'magit)
    #+END_SRC

    I use magit-status a lot. So let's bind it to C-x g.

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-x g") 'magit-status)
    #+END_SRC

*** git-gutter-mode+

    It is really nice having +/= in the gutter. I like it more than
    having line numbers and thus I've dumped linum-mode.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'git-gutter-fringe+)
      (global-git-gutter+-mode t)
    #+END_SRC

    It is also quite nice to be able to navigate a file by he git
    hunks. It makes it a bit easier to see what has changed since the
    last time in the context of the whole file.

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "s-n") 'git-gutter+-next-hunk)
      (global-set-key (kbd "s-p") 'git-gutter+-previous-hunk)
    #+END_SRC

    We can diminish the size of GitGutter in the mode-line

    #+BEGIN_SRC emacs-lisp
      (diminish 'git-gutter+-mode)
    #+END_SRC

** ace-jump-mode

   Move quickly anywhere in the buffer in 3 keystrokes. We can move
   there with C-c j and back to where we started with C-c k.

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'ace-jump-mode)
     (global-set-key (kbd "C-c j") 'ace-jump-mode)
     (global-set-key (kbd "C-c k") 'ace-jump-mode-pop-mark)
   #+END_SRC

** window and buffer tweaking

*** window movement

    Use Shift+arrow_keys to move cursor around split panes

    #+BEGIN_SRC emacs-lisp
      (windmove-default-keybindings)
    #+END_SRC

*** buffer movement

    Sometimes the problem isn't that you want to move the cursor to a
    particular window, but you want to move a buffer. buffer-move lets
    you do that.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'buffer-move)
      (global-set-key (kbd "<s-up>")     'buf-move-up)
      (global-set-key (kbd "<s-down>")   'buf-move-down)
      (global-set-key (kbd "<s-left>")   'buf-move-left)
      (global-set-key (kbd "<s-right>")  'buf-move-right)
    #+END_SRC

*** shrink and enlarge windows

    On large screens where there are lots of windows in a frame we'll
    often want to shrink or grow individual windows. It would be handy
    to have easier keys for this.

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "s-=") 'shrink-window)
      (global-set-key (kbd "s-+") 'enlarge-window)
    #+END_SRC

** backup directories

   I'm fed up of having to put *~ into my .gitignore everywhere and
   I shouldn't really leave emacs only things in there anyway. Let's
   just move all the backup files to one directory.

   #+BEGIN_SRC emacs-lisp
     (setq
      backup-by-copying t      ; don't clobber symlinks
      backup-directory-alist
      '(("." . "~/.saves"))    ; don't litter my fs tree
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)       ; use versioned backups
   #+END_SRC

** ibuffer

   I've never used ibuffer much before, but many people swear by it
   (rather than at it). I've tried it now and it looks good. So let's
   rebind C-x C-b.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x C-b") 'ibuffer)
   #+END_SRC

** projectile

   [[https://github.com/bbatsov/projectile][projectile]] from [[http://twtitter.com/bbatsov][Bozhidar Batsov]] constrains and helps things like
   searches so that they happen within a git repo or leiningen
   project.

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'projectile)
     (projectile-global-mode)
   #+END_SRC

   But we don't need to see that projectile mode is running everywhere
   so let's diminish it.

   #+BEGIN_SRC emacs-lisp
     (diminish 'projectile-mode)
   #+END_SRC

* Programming Modes
** prog-mode
*** Parentheses
**** Show Parens

     #+BEGIN_SRC emacs-lisp
       (show-paren-mode +1)
     #+END_SRC

**** paredit-mode

     #+BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'paredit)
       (diminish 'paredit-mode "()")
       (add-hook 'prog-mode-hook 'paredit-mode)
     #+END_SRC

*** rainbow-delimiters

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'rainbow-delimiters)
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    #+END_SRC

*** rainbow mode

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'rainbow-mode)
      (add-hook 'prog-mode-hook 'rainbow-mode)
      (diminish 'rainbow-mode)
    #+END_SRC

*** highlight-symbol

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'highlight-symbol)
      (add-hook 'prog-mode-hook 'highlight-symbol-mode)
    #+END_SRC

*** yasnippet

    Tempate system for Emacs. It allows you to type an abbreviation
    and automatically expand it into function templates.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'yasnippet)
    #+END_SRC

**** Snippet Directory

     We need a place to add our snippets for each mode as well. We'll
     put that in snippets.

     #+BEGIN_SRC emacs-lisp
       (setq yas/root-directory (concat user-emacs-directory "snippets"))
     #+END_SRC

**** Turn it on globally

     And we want to add yasnippets to all modes where we have snippets.

     #+BEGIN_SRC emacs-lisp
       (yas-global-mode 1)
     #+END_SRC

**** Diminish it

     I don't need to see it everywhere though.

     #+BEGIN_SRC emacs-lisp
       (diminish 'yas-minor-mode)
     #+END_SRC

*** smartscan

    A suggestion from [[http://www.masteringemacs.org/articles/2011/01/14/effective-editing-movement/][Effective Editing]] in [[http://www.masteringemacs.org/][Mastering Emacs]].

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'smartscan)
      (add-hook 'prog-mode-hook
                '(lambda () (smartscan-mode 1)))
    #+END_SRC

** lisp modes

*** lisp hooks

    #+BEGIN_SRC emacs-lisp
            (setq lisp-hooks (lambda ()
                               (eldoc-mode +1)
                               (diminish 'eldoc-mode)
                               (define-key paredit-mode-map
                                 (kbd "{") 'paredit-open-curly)
                               (define-key paredit-mode-map
                                 (kbd "}") 'paredit-close-curly)))
    #+END_SRC

*** emacs-lisp

**** lisp-mode-hook

     #+BEGIN_SRC emacs-lisp
       (add-hook 'emacs-lisp-mode-hook lisp-hooks)
     #+END_SRC

**** Pop Up Help in Emacs Lisp

     #+BEGIN_SRC emacs-lisp
       (require 'popup)

       (defun describe-thing-in-popup ()
         (interactive)
         (let* ((thing (symbol-at-point))
                (help-xref-following t)
                (description (with-temp-buffer
                               (help-mode)
                               (help-xref-interned thing)
                               (buffer-string))))
           (popup-tip description
                      :point (point)
                      :around t
                      :height 30
                      :scroll-bar t
                      :margin t)))
     #+END_SRC

***** The usual help keybinding

      Let's use C-c C-d for describing functions at point as this is
      the binding in cider/nrepl that I'm used to. We'll probably do
      this in other modes as well so we'll make it a local keybinding
      and then it will more or less [[http://en.wikipedia.org/wiki/DWIM][dwim]].

      #+BEGIN_SRC emacs-lisp
        (add-hook 'emacs-lisp-mode-hook
                  (lambda () (local-set-key (kbd "C-c C-d") 'describe-thing-in-popup)))
      #+END_SRC

*** clojure
**** cider

***** install

      You can get most of the clojure support by just elpa installing
      cider.

      #+BEGIN_SRC emacs-lisp
        (maybe-install-and-require 'cider)
      #+END_SRC

***** don't print too much

      #+BEGIN_SRC emacs-lisp
        (setq cider-repl-print-length 100)
      #+END_SRC

***** clojure-mode-hook

      #+BEGIN_SRC emacs-lisp
        (add-hook 'clojure-mode-hook lisp-hooks)
      #+END_SRC

***** Save cider history

      #+BEGIN_SRC emacs-lisp
        (setq cider-history-file (concat user-emacs-directory "cider-history"))
      #+END_SRC

***** Pop up Documentation

      Docs go in a popup rather than another window.

      #+BEGIN_SRC emacs-lisp
        (define-key cider-mode-map (kbd "C-c C-d") 'ac-nrepl-popup-doc)
      #+END_SRC

***** Don't pop up errors

     #+BEGIN_SRC emacs-lisp
      (setq cider-show-error-buffer nil)
     #+END_SRC
***** cider-test-report diff hook
     #+BEGIN_SRC emacs-lisp
      (defun cider-ediff-hack ()
       (interactive)
       (let ((expected (get-text-property (point) 'actual))
        (tmp-buffer (generate-new-buffer " *tmp*"))
        (expected-buffer (generate-new-buffer " *expected*"))
        (actual-buffer   (generate-new-buffer " *actual*")))
       (with-current-buffer tmp-buffer
        (insert expected)
        (goto-char (point-min))
        (re-search-forward "= ")
        (let ((opoint (point)))
          (forward-sexp 1)
          (let* ((tpoint (point))
                 (our-exp (buffer-substring-no-properties opoint (point)))
                 (_ (forward-sexp 1))
                 (our-act (buffer-substring-no-properties tpoint (point) )))
            (with-current-buffer expected-buffer
              (insert our-exp)
              (delete-trailing-whitespace))
            (with-current-buffer actual-buffer
              (insert our-act)
              (delete-trailing-whitespace))
            (apply 'ediff-buffers
                   (setq cider-test-ediff-buffers
                         (list (buffer-name expected-buffer)
                               (buffer-name actual-buffer)))))))))
     #+END_SRC
**** align let forms

     Pretty alignment of let, when-let, if-let, binding, loop,
     with-open, literal hashes {}, defroute, cond, and condp
     (except :>> subforms).

     #+BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'align-cljlet)
     #+END_SRC

**** helm and clojure

     #+BEGIN_SRC emacs-lisp
       (defun helm-clojure-headlines ()
         "Display headlines for the current Clojure file."
         (interactive)
         (helm :sources '(((name . "Clojure Headlines")
                           (volatile)
                           (headline "^[;(]")))))

       (add-hook 'clojure-mode-hook
                 (lambda () (local-set-key (kbd "s-h") 'helm-clojure-headlines)))
     #+END_SRC

**** Clojure Cheat Sheet

     #+BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'clojure-cheatsheet)
       (add-hook 'clojure-mode-hook
                 (lambda () (local-set-key [s-f1] 'clojure-cheatsheet)))
     #+END_SRC

**** sw1nn-cider-perspective or Engineering

     #+BEGIN_SRC emacs-lisp
       (defun sw1nn-nrepl-current-server-buffer ()
         (let ((nrepl-server-buf (replace-regexp-in-string "connection" "server" (nrepl-current-connection-buffer))))
           (when nrepl-server-buf
             (get-buffer nrepl-server-buf))))

       (defun sw1nn-cider-perspective ()
         (interactive)
         (delete-other-windows)
         (split-window-below)
         (windmove-down)
         (shrink-window 25)
         (switch-to-buffer (sw1nn-nrepl-current-server-buffer))
         (windmove-up)
         (pop-to-buffer (cider-find-or-create-repl-buffer)))
     #+END_SRC

** javascript

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'js2-mode)
     (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'interpreter-mode-alist '("node" . js2-mode))
   #+END_SRC

** pastebins

   gist, pastebin, refheap. All good ways of sharing snippets of code
   with people on irc or similar.

*** gist

    As you probably already have a github account, having gist as a
    way of sharing code snippets is a good idea.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'gist)
    #+END_SRC

*** refheap

    I like [[http://refheap.com][refheap]] and Anthony Grimes seems like a nice guy. And it
    is built in clojure.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'refheap)
    #+END_SRC

* Text Modes
** Check spelling
   #+BEGIN_SRC emacs-lisp
   (setq ispell-program-name "aspell"
         ispell-dictionary "english")
   #+END_SRC
** org-mode

   I also use org-mode on its own and would like to use it more. I
   used to be a complete planner-mode addict. I've never really
   gotten into org-mode in the same way. Having a way to sync to
   trello and link to my email, magit and everything else keeps
   making me want to try though.

*** fontify

    This is all written in org-mode. It would be good if the source
    code examples were fonitfies according to their major mode.

    #+BEGIN_SRC emacs-lisp
      (setq org-src-fontify-natively t)
    #+END_SRC

*** spelling

    On a Mac we need to tell org-mode to use aspell, which we
    installed using homebrew.

    #+BEGIN_SRC emacs-lisp
      (setq ispell-program-name (executable-find "aspell"))
    #+END_SRC

*** org-headlines

    Just like in [[helm and clojure]] we'd like to be able to look at
    the headlines in org-mode too.

    #+BEGIN_SRC emacs-lisp
      (add-hook 'org-mode-hook
                (lambda () (local-set-key (kbd "s-h") 'helm-org-headlines)))
    #+END_SRC

*** org-cheatsheet

    Having cheatsheets around is handy. Especially for sprawling
    modes like org-mode.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'helm-orgcard)
      (add-hook 'org-mode-hook
                       (lambda () (local-set-key [s-f1] 'helm-orgcard)))
    #+END_SRC

*** org-feed

    I really quite liked google as a blog reader. Before that I used
    to use Bloglines, which I liked more. Now I find that I can use
    emacs and org-mode to read RSS and atom.

    #+BEGIN_SRC emacs-lisp
      (setq org-feed-retrieve-method 'curl)
    #+END_SRC

**** The Blog Roll

     And this is my incomplete and silly blog roll. There are many
     more things that I should read and I read very few on the ones
     in here regularly. If I know you and you are in here, you
     should really tweet about your new blog posts more.

     If I'm honest, really this is how I keep up with various
     webcomics.

     #+BEGIN_SRC emacs-lisp
       (load-if-exists (concat user-emacs-directory "local/blog-roll.el"))
     #+END_SRC

*** ox-reveal

    [[https://github.com/hakimel/reveal.js/][reveal.js]] is a great way of making pretty presentations,
    especially if you have a fair bit of code. Kris Jenkins suggested
    that [[https://github.com/yjwen/org-reveal][ox-reveal]] would be a great way of generating the slides for
    reveal.js.

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'ox-reveal)
    #+END_SRC

    As a part of the installation we need to point at where we have
    our copy of reveal.js. It uses a lot of disk space, but put it
    into a sub directory for each presentation. Then you can serve it
    up using http-server in node or a python webserver locally and
    then things like speaker notes will work. Full screen in Lion is
    still b0rken. Yet another reason to go over to linux.

    #+BEGIN_SRC emacs-lisp
      (setq org-reveal-root "reveal.js-2.5.0/")
    #+END_SRC

*** org and magit

    Because sometimes you want to link to that particular commit.

    I added this functionality with this commit: [[magit:~/emacs-configs/otfrom-org-emacs/::commit@1dd7516][1dd7516]]

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'org-magit)
    #+END_SRC


** html, sgml, xml

*** tagedit

    This gives us paredit like editing for html

    #+BEGIN_SRC emacs-lisp
      (maybe-install-and-require 'tagedit)
      (eval-after-load "sgml-mode"
        '(progn
           (require 'tagedit)
           (tagedit-add-paredit-like-keybindings)
           (add-hook 'html-mode-hook (lambda () (tagedit-mode 1)))))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (tagedit-add-experimental-features)
    #+END_SRC

*** css

    I should probably look at adding more sugar to this.

**** paredit

     #+BEGIN_SRC emacs-lisp
       (add-hook 'css-mode-hook 'paredit-mode)
     #+END_SRC

**** rainbow mode

     #+BEGIN_SRC emacs-lisp
       (add-hook 'css-mode-hook 'rainbow-mode)
     #+END_SRC

**** eldoc

     #+BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'css-eldoc)
     #+END_SRC

**** helm support

     #+BEGIN_SRC emacs-lisp
       (maybe-install-and-require 'helm-css-scss)
       (add-hook 'css-mode-hook
                 (lambda () (local-set-key (kbd "s-h") 'helm-css-scss)))
     #+END_SRC

** markdown

   #+BEGIN_SRC emacs-lisp
     (maybe-install-and-require 'markdown-mode)
   #+END_SRC

*** Github Flavouring

    I pretty much *always* want to do [[http://github.github.com/github-flavored-markdown/][github flavoured markdown]], so
    let's just change that auto-mode-alist.

    #+BEGIN_SRC emacs-lisp
      (add-to-list 'auto-mode-alist '(".md$" . gfm-mode))
    #+END_SRC

**** Github Flavoured Preview

     We also need to change the preview as the standard preview
     doesn't render github flavoured markdown correctly. I've
     installed markdown Preview+ as a Chrome Extension and associated
     .md files with Chrome on Mac OS X.

     This is all a bit broken really, but will work for now. I'm sorry
     that it is like this and I'm sure some day I'll fix it. This also
     means that you use markdown-open rather than markdown-preview.

     #+BEGIN_SRC emacs-lisp
       (setq markdown-open-command "open")
     #+END_SRC

*** helm markdown headlines

    I want super-h to work and give me headlines just like in
    org-mode. I feel this could perhaps be a bit better, but this will
    do for now.

    #+BEGIN_SRC emacs-lisp
      (defun helm-markdown-headlines ()
        "Display headlines for the current Clojure file."
        (interactive)
        (helm :sources '(((name . "Markdown Headlines")
                          (volatile)
                          (headline "^[#]")))))

      (add-hook 'markdown-mode-hook
                (lambda () (local-set-key (kbd "s-h") 'helm-markdown-headlines)))
    #+END_SRC
